module.exports = `
    
    type Node {
        _id: ID
        name: String
        node: String
        
        relatedNodes: [Node]
        subNodes: [Node]
        aboveNodes: [Node]

        categoryNodes: [Node]
        groupNodes: [Node]

        state: stateEnum

        graphNeighbors: [graphNeighborType]        


        match_v2_update: match_v2_updateType
        match_v2: [match_v2Type]


        registeredAt: String,

        selected: Boolean

        star: Boolean # on the tree structure if they have a star
        open: Boolean # on the tree structure if they are originally open 
        level: Int # Shows the level of the Node for the user, this can be used on the UI -> treeOfRelatedNodes

    }

     type graphNeighborType {
        node: Node
        hopNumTotal: Int
        weightTotal: Float
        weightSeparate: [weightSeparateType]
    }

    type weightSeparateType {
        node: Node
        weight: Float
        hopNum: Int
    }

    type match_v2_updateType {
        member: Boolean
        projectRole: Boolean
    }

    type match_v2Type {
        serverID: [ID]
        nodeResID: ID
        type: typeEnumMP
        wh_sum: Float
        numPath: Float
        wh_k: Float,
        k_sum: Float,
        wh_k_arr: [wh_k_arrType],
        conn_node_wh: [conn_node_whType],
    }

    type conn_node_whType {
        nodeConnID: String, 
        wh_sum: Float,
        numPath: Float, 
    }

    type wh_k_arrType {
        wh_sum: Float
        numPath: Float
    }

    enum typeEnumMP {
        Member
        ProjectRole
    }



    type pathType {
        hop: Float,
        weight: Float,
    }



    enum stateEnum {
        waiting
        rejected
        approved
    }

    input relatedNodeInput {
        _id: ID
        relatedNode_id: ID
    }

    input relatedNode_nameInput {
        name: String
        relatedNode_name: String
        weight: String
        connection: String
    }

    input createNode_V2Input {
        name: String
        node: String
    }

    input connectMemoriesToKnowledgeGraph_V2Input {
        userID: ID
        positionID: ID
    }

    input createNodeCategoryGroupInput {
        name: String
        node: String
        categoryName: String
        categoryTypeName: String
        categoryID: ID
        groupName: String
        groupTypeName: String
        groupID: String
    }

    input createNodeInput {
        node: String,

        name: String,


        subNodes: [ID],
        aboveNodes: [ID],

        state: stateEnum
    }

    input findNodeInput {
        _id: ID
    }

    input findNodesInput {
        _id: [ID]
        name: String
        names: [String]
        node: String
        recalculate_en: recalculateEnum # Only return the nodes that need to be recalculated based on teh enum
        show_match_v2: Boolean # its always hiden in order to save on speed, exchept if you make this variable true 
        selectedNodes: [ID] # The nodes taht are selected, we return back the structured array but on this nodes we put selected for the frontend
    }

    input nodes_autocompleteInput { 
        search: String
        nodeType: String
        rootType: String
    }

    input treeOfRelatedNodesInput {
        memberID: ID
        relatedNodes:[relatedNodesTreeInput]
    }

    input relatedNodesTreeInput {
        nodeID: ID
        relatedScore: Float
    }


    enum recalculateEnum {
        Member
        ProjectRole
        All
    }

`