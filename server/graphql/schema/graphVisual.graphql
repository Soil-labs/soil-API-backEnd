module.exports = `
    
    type Graph {
        nodesVisual: [NodeVisual]
        edges: [Edge]
    }

    type NodeVisual {
        _id: ID
        fakeID: [ID]
        originalNode: ID
        name: String
        type: String
        avatar: String
        extraDistanceRation: Float

        style: StyleNodeOut
    }

    type StyleNodeOut {
        size: Int
        fill: String
        stroke: String
    }

    type Edge {
        source: ID
        target: ID
        type: String
        distanceRation: Float
        
        style: StyleEdgeOut
    }

    type StyleEdgeOut {
        stroke: String
        fill: String
        distance: Float
        strength: Float
    }



    

    input findMemberGraphInput {
        memberID: ID
        showAvatar: Boolean
        nodeSettings: [nodeSetting]
        edgeSettings: [edgeSetting]
    }

    input nodeSetting {
        type: String
        style: StyleIn
    }

    input StyleIn {
        size: Int
        fill: String
        stroke: String
    }

    input edgeSetting {
        mainEdge: edgeSettingIn
        moreThanSplit: Int # If the number is bigger than this, then you split the Edge
        hiddenEdge: Boolean
        splitEdge: [edgeSettingSplitIn] # If you want to split the Edge and put something in the middle
    }

    input edgeSettingIn{
        nodeTypeSource: String
        nodeTypeTarget: String

        style: styleEdgeIn
    }

    input edgeSettingSplitIn{
        nodeTypeSource: String
        nodeTypeMiddle: String
        nodeTypeTarget: String
    }

    input styleEdgeIn {
        color: String
        distance: Float
        strength: Float
    }

    input findProjectGraphInput {
        projectID: ID
        showAvatar: Boolean
        numEdgesSplit: Int
        nodeSettings: [nodeSetting]
        edgeSettings: [edgeSetting]
    }

    input findMemberToProjectGraphInput {
        memberID: ID
        projectID: ID
        showAvatar: Boolean
        numEdgesSplit: Int
        nodeSettings: [nodeSetting]
        edgeSettings: [edgeSetting]
    }

    input dynamicSearchToProjectGraphInput {
        nodesID: [ID]
        projectID: ID
        showAvatar: Boolean
        numEdgesSplit: Int
        nodeSettings: [nodeSetting]
        edgeSettings: [edgeSetting]
    }
    input dynamicSearchGraphInput {
        nodesID: [ID]
        showAvatar: Boolean
        numEdgesSplit: Int
        nodeSettings: [nodeSetting]
        edgeSettings: [edgeSetting]
    }
    input dynamicSearchToMemberGraphInput {
        nodesID: [ID]
        memberID: ID
        showAvatar: Boolean
        numEdgesSplit: Int
        nodeSettings: [nodeSetting]
        edgeSettings: [edgeSetting]
    }

    input findMemberToMemberGraphInput {
        memberOneID: ID
        memberTwoID: ID
        showAvatar: Boolean
        numEdgesSplit: Int
        nodeSettings: [nodeSetting]
        edgeSettings: [edgeSetting]
    }

    input findMultipleMembersProjectsGraphInput {
        membersID: [ID]
        projectsID: [ID]
        showAvatar: Boolean
        numEdgesSplit: Int
        
        nodeSettings: [nodeSetting]
        edgeSettings: [edgeSetting]
    }

    input findOneMemberToMembersGraphInput {
        memberID: ID
        showAvatar: Boolean
        numEdgesSplit: Int
        
        nodeSettings: [nodeSetting]
        edgeSettings: [edgeSetting]
    }


    
`