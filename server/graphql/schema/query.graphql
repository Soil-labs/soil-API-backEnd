module.exports = `
    type Query{


          #  ---------- ERROR QUERY (DEV ONLY) -------
            errors(fields:errorsInput):PaginatedErrorLogs

          
          #  ---------- PROJECT QUERY -------
            findProject(fields:findProjectInput): Project
            findProjects(fields:findProjectsInput): [Project]
            findProjects_RequireSkill(fields:findProjects_RequireSkillInput): [Project]
            findProjects_RecommendedToUser(fields:findProjects_RecommendedToUserInput): [projectMatchType]
            match_projectToUser(fields:match_projectToUserInput): projectUserMatchType
            findTeams(fields:findTeamsInput): [Team]
            findRoles(fields:findRolesInput): [Role]
            findEpic(fields:findEpicInput): [Epic]
            
          #  ---------- MEMBER QUERY -------
            findMember(fields:findMemberInput): Members
            findMembers(fields:findMembersInput): [Members]
            matchMembersToUser(fields:matchMembersToUserInput): [matchMembersToUserOutput]
            matchMembersToSkills(fields:matchMembersToSkillInput): [matchMembersToSkillOutput]
            matchMembersToProject(fields:matchMembersToProjectInput): [matchMembersToProjectOutput]
            matchMembersToProjectRole(fields:matchMembersToProjectRoleInput): [matchMembersToProjectRoleOutput]
            matchPrepareSkillToMembers(fields:matchPrepareSkillToMembersInput): Skills
            matchPrepareNode(fields:matchPrepareNodeInput): Node
            matchPrepareNode_AI4(fields:matchPrepareNode_AI4Input): Node
            matchPrepareNode_old(fields:matchPrepareNodeInput): Node
            matchPrepareSkillToProjectRoles(fields:matchPrepareSkillToProjectRolesInput): Skills
            matchSkillsToMembers(fields:matchSkillsToMembersInput): [matchMembersToSkillOutput]
            matchNodesToMembers(fields:matchNodesToMembersInput): [matchMembersToSkillOutput]
            matchNodesToMembers_AI4(fields:matchNodesToMembers_AI4Input): [matchMembersToSkillOutput]
            setAllMatch_v2(val: Boolean,node: String): Boolean
            matchNodesToMembers_old(fields:matchNodesToMembersInput): [matchMembersToSkillOutput]
            matchSkillsToProjects(fields:matchSkillsToProjectsInput): [matchSkillsToProjectsOutput]
            memberPieChartNodeCategories(fields:memberPieChartNodeCategoriesInput): [memberPieChartNodeCategoriesOutput]
            memberRadioChartCharacterAttributes(fields:memberRadioChartCharacterAttributesInput): [memberRadioChartCharacterAttributesOutput]
            candidateNotesEdenAI(fields:candidateNotesEdenAIInput): [candidateNotesEdenAIOutput]
            matchNodesToProjectRoles(fields:matchNodesToProjectRolesInput): [matchSkillsToProjectsOutput]
            matchNodesToProjectRoles_old(fields:matchNodesToProjectRolesInput): [matchSkillsToProjectsOutput]



            members_autocomplete(fields:members_autocompleteInput): [Members]

          #  ---------- SKILL QUERY -------
            findSkill(fields:findSkillInput): Skills
            findSkills(fields:findSkillsInput): [Skills]
            waitingToAproveSkills(fields:findSkillsInput): [Skills]
            adminFindAllSkillsEveryState(fields:findSkillsInput): [Skills]
            skills(fields:findSkillsInputPaginated): PaginatedSkills
            skills_autocomplete(fields:skills_autocompleteInput): [Skills]

           #  ---------- NODE QUERY -------
            findNode(fields:findNodeInput): Node
            findNodes(fields:findNodesInput): [Node]
            nodes_autocomplete(fields:nodes_autocompleteInput): [Node]
            treeOfRelatedNodes(fields:treeOfRelatedNodesInput): [Node]

           #  ---------- CONVERSATION QUERY -------
            findConversation(fields:findConversationInput): Conversation
            findConversations(fields:findConversationsInput): [Conversation]


           #  ---------- COMPANY QUERY -------
            findCompany(fields:findCompanyInput): Company
            findCompanies(fields:findCompaniesInput): [Company]
           
           
           #  ---------- COMPANY QUERY -------
            findPosition(fields:findPositionInput): Position
            findPositions(fields:findPositionsInput): [Position]


           #  ---------- QUESTIONS EDENAI QUERY -------
            findQuestionEdenAI(fields:findQuestionEdenAIInput): QuestionsEdenAI


          #  ---------- QUERY TEMPLATE QUERY -------
            findRoleTemplate(fields:findRoleTemplateInput): RoleTemplate
            findRoleTemplates(fields:findRoleTemplatesInput): [RoleTemplate]

            #  ---------- SERVER QUERY -------
            findServers(fields:findServersInput): [ServerTemplate]

            #  ---------- GRANT QUERY -------
            findGrants(fields:findGrantsInput): [GrantTemplate]


          #  ---------- SKILL CATEGORY QUERY -------
            findSkillCategory(fields:findSkillCategoryInput): SkillCategory
            findSkillCategories(fields:findSkillCategoriesInput): [SkillCategory]


          #  ---------- SKILL SUB CATEGORY QUERY -------
            findSkillSubCategory(fields:findSkillSubCategoryInput): SkillSubCategory
            findSkillSubCategories(fields:findSkillSubCategoriesInput): [SkillSubCategory]

          #  ---------- PROJECT UDPATE QUERY -------
          findProjectUpdates(fields:findProjectUpdatesINPUT): [ProjectUpdate]
          findAllProjectsTeamsAnouncments(fields:findAllProjectsTeamsAnouncmentsInput): [findAllProjectsTeamsAnouncmentsOutput]
          findGarden(fields:findGardenInput): [findGardenOutput]

          #------------ROOM QUERY ---------
          findRoom(fields: findRoomsInput): Rooms
          findRooms(fields: findRoomsInput): PaginatedRooms


          # ----------- MATCH -----------
          matchProjectsToMember(fields:matchProjectsToMemberInput): [Project]
          # ----------- MATCH -----------

          # ----------- CHAT QUERY ---------
          findChat(fields:findChatInput):Chats


          # ---------- AI QUERY -------------
          findMessage(fields: findMessageInputPaginated): PaginatedMessages
          edenGPTreply(fields: edenGPTreplyInput): edenGPTreplyOutput
          messageMapKG(fields: messageMapKGInput): messageMapKGOutput
          messageMapKG_V2(fields: messageMapKG_V2Input): messageMapKG_V2Output
          messageMapKG_V3(fields: messageMapKG_V3Input): messageMapKG_V3Output
          messageMapKG_V4(fields: messageMapKG_V4Input): messageMapKG_V4Output
          messageMapKG_V5(fields: messageMapKG_V5Input): messageMapKG_V5Output
          edenGPTreplyMemory(fields: edenGPTreplyMemoryInput): edenGPTreplyMemoryOutput
          edenGPTreplyChatAPI(fields: edenGPTreplyChatAPIInput): edenGPTreplyChatAPIOutput
          edenGPTreplyChatAPI_V2(fields: edenGPTreplyChatAPI_V2Input): edenGPTreplyChatAPI_V2Output
          edenGPTreplyChatAPI_V3(fields: edenGPTreplyChatAPI_V3Input): edenGPTreplyChatAPI_V3Output
          edenGPTEndorseChatAPI(fields: edenGPTEndorseChatAPIInput): edenGPTEndorseChatAPIOutput
          evaluateAnswerEdenAI(fields: evaluateAnswerEdenAIInput): evaluateAnswerEdenAIOutput
          edenGPTCreateProfileExperienceChatAPI(fields: edenGPTCreateProfileExperienceChatAPIInput): edenGPTCreateProfileExperienceChatAPIOutput
          edenAITalSearchExpirience(fields: edenAITalSearchExpirienceInput): edenAITalSearchExpirienceOutput
          interviewEdenAI(fields: interviewEdenAIInput): interviewEdenAIOutput
          createProfileExperienceWithChatCVMemory(fields: createProfileExperienceWithChatCVMemoryInput): createProfileExperienceWithChatCVMemoryOutput
          edenGPTReviewChatAPI(fields: edenGPTReviewChatAPIInput): edenGPTReviewChatAPIOutput
          edenGPTsearchProfiles(fields: edenGPTsearchProfilesInput): edenGPTsearchProfilesOutput
          edenGPTsummaryProfile(fields: edenGPTsummaryProfileInput): edenGPTsummaryProfileOutput
          conversationToSummaryGPT(fields: conversationToSummaryGPTInput): conversationToSummaryGPTOutput

          # ---------- GRAPH VISUAL QUERY -------------
          findMemberGraph(fields: findMemberGraphInput): Graph
          findProjectGraph(fields: findProjectGraphInput): Graph
          findMemberToProjectGraph(fields: findMemberToProjectGraphInput): Graph
          dynamicSearchToProjectGraph(fields: dynamicSearchToProjectGraphInput): Graph
          dynamicSearchGraph(fields: dynamicSearchGraphInput): Graph
          dynamicSearchToMemberGraph(fields: dynamicSearchToMemberGraphInput): Graph
          dynamicSearchToMemberGraphV2(fields: dynamicSearchToMemberGraphV2Input): Graph
          dynamicSearchToMemberGraphGPT(fields: dynamicSearchToMemberGraphGPTInput): Graph
          dynamicSearchToMemberCategoryGroup(fields: dynamicSearchToMemberCategoryGroupInput): Graph
          findMemberToMemberGraph(fields: findMemberToMemberGraphInput ): Graph
          findMultipleMembersProjectsGraph(fields: findMultipleMembersProjectsGraphInput ): Graph
          findOneMemberToMembersGraph(fields: findOneMemberToMembersGraphInput): Graph


          # ---------- EDEN METRICS QUERY ----------------
          membersStats(fields: statsInput):[ResultCount]
          lurkersContributorsQuery:LurkersAndContributors
          activeMembersStats(fields: statsInput):[ResultCount]
          activeUsersQueryStats(fields: activeUsersInput):[ResultCount2]
          
      
          # ---------- EDEN ENDORSEMENT QUERY ----------------
          findEndorsementLink(fields: findEndorsementLinkInput): [EndorsementLink]

        }
`;