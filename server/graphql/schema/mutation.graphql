module.exports = `
    type Mutation {
        #  ---------- USER MUTATIONS -------
        login(fields:loginInput!):User!

        #  ---------- MEMBER MUTATIONS -------
        addNewMember(fields:addNewMemberInput!): Members
        updateMember(fields:updateMemberInput!): Members
        addFavoriteProject(fields:addFavoriteProjectInput!): Members
        addPreferencesToMember(fields:addPreferencesToMemberInput!): Members
        addNodesToMember(fields:addNodesToMemberInput!): Members
        updateNodesToMember(fields:updateNodesToMemberInput!): Members
        deleteNodesFromMember(fields:deleteNodesFromMemberInput!): Members
        deleteMember(fields:deleteMemberInput!): Members
        # addSkillToMember(fields:addSkillToMember_Input!):Members
        addEndorsement(fields: addEndorsementInput ): Members
        createFakeUser(fields: createFakeUserInput ): Members
        uploadUserDataGPT(fields: uploadUserDataGPTInput ): Members
        endorseAttribute(fields:endorseAttributeInput!): Members


        #  ---------- PROJECT MUTATIONS -------
        updateProject(fields:updateProjectInput!):Project
        addNodesToProjectRole(fields:addNodesToProjectRoleInput!):Project
        updateNodesToProjectRole(fields:updateNodesToProjectRoleInput!):Project
        addProjectRole(fields:addProjectRoleInput!):Project
        deleteNodesToProjectRole(fields:deleteNodesToProjectRoleInput!):Project
        newTweetProject(fields:newTweetProjectInput!):tweetsProject
        approveTweet(fields:approveTweetInput!):Project
        changeTeamMember_Phase_Project(fields:changeTeamMember_Phase_ProjectInput!):Project
        createNewTeam(fields:createNewTeamInput!):Team
        createNewRole(fields:createNewRoleInput!):Role
        createNewEpic(fields:createNewEpicInput!):Epic
        deleteProject(fields:deleteProjectInput):Project
        createProject(fields:createProjectInput):Project

        

        #  ---------- SKILL MUTATIONS -------
        # createSkill(fields:createSkillInput): Skills
        # createSkills(fields:createSkillsInput): [Skills]
        # createApprovedSkill(fields:createApprovedSkillInput): Skills
        # approveOrRejectSkill(fields:approveOrRejectSkillInput): Skills

        #relatedSkills(fields:relatedSkillsInput): Skills

        #  ---------- NODE MUTATIONS -------
        createNode(fields:createNodeInput): Node
        relatedNode(fields:relatedNodeInput): Node
        relatedNode_name(fields:relatedNode_nameInput): Node
        createNodeCategoryGroup(fields:createNodeCategoryGroupInput): Node


        #  ---------- ROLE MUTATIONS -------
        updateRoleTemplate(fields:createRoleInput): RoleTemplate

        #  ---------- SERVER MUTATIONS -------
        updateServer(fields:updateServerInput): ServerTemplate


        #  ---------- GRANT MUTATIONS -------
        updateGrant(fields:updateGrantInput): GrantTemplate
        addNodesToGrant(fields:addNodesToGrantInput): GrantTemplate
        applyGrant(fields:applyGrantInput): GrantTemplate
        updateNodesToGrant(fields: updateNodesToGrantInput): GrantTemplate


        #  ---------- SKILL CATEGORY MUTATIONS -------
        # updateSkillCategory(fields:updateSkillCategoryInput): SkillCategory

        #  ---------- SKILL SUB CATEGORY MUTATIONS -------
        # updateSkillSubCategory(fields:updateSkillSubCategoryInput): SkillSubCategory


        #  ---------- SKILL CATEGORY MUTATIONS -------
        createProjectUpdate(fields:createProjectUpdateInput!):ProjectUpdate


        #------------- ROOMS CATAGORY MUTATIONS ------
        createRoom(fields: createRoomInput!): Rooms
        enterRoom(fields: enterRoomInput!): Rooms
        exitRoom(fields: enterRoomInput!): Rooms
        updateMemberInRoom(fields: updateMemberInRoomInput): Members
        addNodesToMemberInRoom(fields: addNodesToMemberInRoomInput): Members
        deleteNodesFromMemberInRoom(fields: deleteNodesFromMemberInRoomInput): Members
        updateNodesToMemberInRoom(fields: updateNodesToMemberInRoomInput ): Members

        #  ---------- CHAT MUTATIONS -------
        addNewChat(fields: addNewChatInput): Chats
        updateChatReply(fields: updateChatReplyInput): Chats
        updateChatResult(fields: updateChatResultInput): Chats

        # ------------- AI MUTATIONS ------------
        addMessage(fields: addMessageInput): AI
        storeLongTermMemory(fields: storeLongTermMemoryInput): storeLongTermMemoryOutput
        addMessages(fields: addMessagesInput): [AI]
        updateMessage(fields: updateMessageInput): AI
        useAI_OnMessage(fields: useAI_OnMessageInput): useAI_OnMessageOutput
        messageToGPT(fields: messageToGPTInput): messageToGPTOutput
        inputToGPT(fields: inputToGPTInput): inputToGPTOutput
        CVtoSummary(fields: CVtoSummaryInput): CVtoSummaryOutput

        # ------------- ERROR MUTATIONS ------------
        createError(fields: createErrorInput!): ErrorLog
        deleteError(fields: deleteErrorInput!): ErrorLog


        # -------------- EDEN METRICS --------------
        saveCoreProductFeatureInteration(fields:saveCoreProductFeatureInterationInput):Boolean
        saveDailyLogin(fields: saveDailyLoginInput):Boolean
        saveActionsPerformed(fields: saveActionsPerformedInput):Boolean
    }
`