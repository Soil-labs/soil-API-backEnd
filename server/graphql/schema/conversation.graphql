module.exports = `
    
    type Conversation {
        _id: ID
        userID: String, 
        convKey: String,
        positionID: String, 
        extraPositionsID: [ID]
        positionTrainEdenAI: Boolean,


        threadID_openAI: String,

        stateSearch: stateSearchType

        typeConversation: typeConversationEnum

        subjectConv: subjectConvType,

        summariesMessages: [summariesMessagesType],

        #  conv: [messageChat],
        conversation: [conversationType],

        lastMsgSummed: Int,

        summaryReady: Boolean,

        summary: [summaryType],

        typeConvo: typeConvoEnum

        questionsAnswered: [questionAnsweredType],
        
        updatedAt: Date,
    }

    type stateSearchType {
        currentState: stateSearchEnum
        memories: [memoryStateType]
    }

    enum stateSearchEnum {
        SEARCHING
        FOUND
        NOT_FOUND
    }

    type memoryStateType {
        content: String
        score: Float
        primitives: [primitiveType]
    }

    type primitiveType {
        type: String
        score: Float
    }

    enum typeConversationEnum {
        INTERVIEW
        ALIGNMENT_POSITION
        PROMOTE_CANDIDATE
        ASK_OPPORTUNITY
    }

    type subjectConvType {
        positionIDs: [ID],
        userIDs: [ID],
        companyIDs: [ID],
    }

    type summariesMessagesType {
        content: String,
        date: Date,
        pineConeID: String,
    }
    
    enum typeConvoEnum {
        QUERY_RESPONSE
        INTERVIEW
        ALIGN
        ASK_OPPORTUNITY
        ASK_CANDIDATE
        ASK_TALENT_LIST
    }

    type questionAnsweredType {
        questionID: ID,
        questionContent: String,
        subConversationAnswer: [conversationType],
        summaryOfAnswer: String,
        summaryOfAnswerSmall: String,
    }

    type summaryType {
        pineConeID: String,
        content: String,
    }
    type conversationType {
        role: String
        typeWidget: widgetTypeEnum
        content: String
        widgetVars: widgetVarsType
        date: Date
    }

    input updateConversationInput {
        conversationID: String,
        userID: String,  
        positionID: String,
        conversation: [conversationInput],
        questionAskingNow: String,
        questionAskingID: ID,
        timesAsked: Int,
    }

    input updateConvSummariesInput {
        _id: ID
        convKey: String,
    }

    input conversationInput {
        role: String
        content: String
    }

    input findConversationInput {
        _id: ID # conversationID
        userID: ID # User Talking to 
        subjectConv: subjectConversationInput
        typeConversation: typeConversationEnum
        limit: Int
        skip: Int
    }
    
    input subjectConversationInput {
        positionIDs: [ID]
        userIDs: [ID]
        companyIDs: [ID]
    }

    input findConversationsInput {
        _id: [ID]
        userID: [String]
        positionID: [String]
        convKey: [String]
        positionTrainEdenAI: Boolean
        summaryReady: Boolean,
    }

`