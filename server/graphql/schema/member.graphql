module.exports = `
    
    
    
    type Members {
        _id: ID
        
        discordName: String
        discordAvatar: String
        discriminator: String
        bio: String

        onbording: onboardingType

        content: contentType
        
        interest: String
        timeZone: String

        serverID: [String],

        hoursPerWeek: Float,

        invitedBy: MembersSmallType

        tweets: [String],
        skills: [skillType_member],
        projects: [projectMemberType],
        archiveProjects: [String],
        network: [Members],

        registeredAt: String,

        previusProjects: [previusProjectsType],

        links: [linkType],

        attributes: attributesType,

        gardenUpdate: gardenUpdateType,

        memberRole: RoleTemplate
    }


    type onboardingType {
        signup: Boolean
        percentage: Int

    }

    type gardenUpdateType {
        epic: [Epic],
        task: [ProjectUpdate],
    }

    type MembersSmallType {
        _id: ID  
        discordName: String
        discordAvatar: String
        discriminator: String
    }

    type contentType {
        interest: String,
        mostProud: String,
        showCaseAbility: String,
    }

    type linkType {
        name: String
        url: String
    }

    type skillType_member  {
        skillInfo: Skills
        level: levelEnum
        author: Members
    }

    type attributesType {
        Director: Int,
        Motivator: Int,
        Inspirer: Int,
        Helper: Int,
        Supporter: Int,
        Coordinator: Int,
        Observer: Int,
        Reformer: Int,
    }

    type previusProjectsType {
        title: String,
        description: String,
        positionName: String,
        link: String,
        picture: String,
        startDate: String,
        endDate: String,
    }

    type projectMemberType {
        info: Project,
        role: roleType,
        champion: Boolean,
        phase: phaseType,
        favorite: Boolean,
    }
    

    type skillsType {
        id: String,
        authors: [Members],
        points: Float,
    }

    
    type matchMembersToUserOutput {
        matchPercentage: Float,
        member: Members,
        commonSkills: [Skills]
    }

    type matchMembersToSkillOutput {
        matchPercentage: Float,
        member: Members,
        commonSkills: [Skills]
    }

    type matchMembersToProjectOutput {
        matchPercentage: Float,
        member: Members,
        commonSkills: [Skills]
    }

    type matchMembersToProjectRoleOutput {
        matchPercentage: Float,
        member: Members,
        commonSkills: [Skills]
    }

    type matchPrepareSkillToMembersOutput {
        matchPercentage: Float,
        member: Members,
        commonSkills: [Skills]
    }

    type matchSkillsToProjectsOutput {
        matchPercentage: Float,
        project: Project,
        commonSkills: [Skills]
        projectRoles: [matchProjectRoles]
    }
    
    type matchProjectRoles {
        matchPercentage: Float,
        projectRole: roleType,
        commonSkills: [Skills]
    }

   
    



    input findMemberInput {
        _id: ID
        serverID: [String]
    }

    input findMembersInput {
        _id: [ID]
        serverID: [String]
    }

    input members_autocompleteInput {
        search: String,
    }

    input matchMembersToUserInput {
        memberID: ID
        serverID:[String]
    }
    input matchMembersToSkillInput {
        skillsID: [ID]
        serverID: [String]
    }

    input matchMembersToProjectInput {
        projectID: ID
        serverID: [String]
    }

    input matchMembersToProjectRoleInput {
        projectRoleID: ID
        serverID: [String]
    }

    input matchPrepareSkillToMembersInput {
        skillID: ID
        serverID: [String]
    }

    input matchPrepareSkillToProjectRolesInput {
        skillID: ID
        serverID: [String]
    }

    input matchSkillsToMembersInput {
        skillsID: [ID]
        serverID: [String]
    }

    input matchSkillsToProjectsInput {
        skillsID: [ID]
        serverID: [String]
    }

    input addNewMemberInput {
        _id: ID
        discordName: String
        discordAvatar: String
        discriminator: String
        bio: String

        invitedBy: String

        hoursPerWeek: Float,

        serverID: String,

        previusProjects: [previusProjectsInput],

    }


    input updateMemberInput {
        _id: ID
        discordName: String
        discordAvatar: String
        discriminator: String
        bio: String

        onbording: onboardingInput

        content: contentInput
        interest: String
        timeZone: String
        serverID: String,
        skills: [skillInput_member]
        
        memberRole: ID

        hoursPerWeek: Float,

        previusProjects: [previusProjectsInput],

        links: [linkInput],

    }

    input onboardingInput {
        signup: Boolean
        percentage: Int
    }

    input contentInput {
        interest: String,
        mostProud: String,
        showCaseAbility: String,
    }

    input linkInput {
        name: String
        url: String
    }

    input skillInput_member {
        id: ID
        level: levelEnum
    }

    input addFavoriteProjectInput {
        memberID: ID
        projectID: ID
        favorite: Boolean
    }


    input endorseAttributeInput {
        _id: ID
        attribute: attributesEnum

    }

    enum attributesEnum {
        Director
        Motivator
        Inspirer
        Helper
        Supporter
        Coordinator
        Observer
        Reformer
    }

    enum levelEnum {
        learning
        junior
        mid
        senior
    }

     input previusProjectsInput {
        title: String,
        description: String,
        positionName: String,
        link: String,
        picture: String,
        startDate: String,
        endDate: String,
    }

    input networkInput {
        memberID: ID
        endorcment: [endorcmentInput]
    }

    input endorcmentInput {
        skillID: ID
        registeredAt: String
    }

    input skillsUpdateMemberInput {
        skillID: ID
        authors: String
        communityLevel: Float
        selfEndorsedLevel: Float
    }


    input addSkillToMember_Input {
        skillID: ID
        memberID: ID
        authorID: ID
        serverID: [String]
    }

    

`