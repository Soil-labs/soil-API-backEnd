module.exports = `
    
    
    
    type Members {
        _id: ID
        
        discordName: String
        discordAvatar: String
        discriminator: String
        bio: String
        oneLiner: String

        conduct: conductType

        companies: [companyType]

        onbording: onboardingType

        positionsApplied: [positionsAppliedType]

        cvInfo: cvInfoType

        content: contentType
        
        interest: String
        
        hoursPerWeek: Float
        timeZone: String
        location: String

        totalIncome: Float
        completedOpportunities: Int

        serverID: [String],




        invitedBy: MembersSmallType

        tweets: [String],
        skills: [skillType_member],
        nodes: [nodesType]
        totalNodeTrust: totalNodeTrustType
        projects: [projectMemberType],
        archiveProjects: [String],
        network: [Members],

        registeredAt: String,

        previousProjects: [previousProjectsType],

        

        links: [linkType],

        attributes: attributesType,

        gardenUpdate: gardenUpdateType,

        budget: budgetMemberType,

        experienceLevel: experienceLevelType,

        memberRole: RoleTemplate
        chat: chatResponse

        
        endorsementsSend: [Endorsement]
        endorsementsSendStats: endorsementsSendStatsType

        endorsementsReceive: [Endorsement]
        endorseSummary: endorseSummaryType   

        reviewsSend: [Review],
        reviewsReceive: [Review],


        reviewSummary: reviewSummaryType     

        preferences: preferencesType
    }

    type conductType {
        number: String,
        whatsappNumber: String,
        email: String,
        telegram: String,
        telegramChatID: String,
        telegramConnectionCode: String,
    }

    type companyType {
        company: Company
        typeT: employeeRole
    }

    type positionsAppliedType {
        positionID: ID
    }

    type cvInfoType {
        cvContent: String
        cvNotes: String
        cvMemory: [cvMemoryType]
        cvPreparationDone: Boolean,
        cvPreparationBio: Boolean,
        cvPreparationNodes: Boolean,
        cvPreparationPreviousProjects: Boolean,
        cvPreparationMemory: Boolean,
    }

    type cvMemoryType {
        memoryContent: String,
        pineConeID: String,
    }

    type endorsementsSendStatsType {
        unclaimedReward: Float,
        totalReward: Float,
        reputation: Float,
    }

    type experienceLevelType {
        total: Int,
        years: Int, 
    }

    type budgetMemberType {
        totalBudget: Float,
        token: String,
        perHour: Float,
        perMonth: Float,
    }
    
    type totalNodeTrustType {
        totalTrustNum: Float,
        averageTrustNum: Float,
        numberOfTrustNodes: Int,
    }

    type preferencesType {
        interestedMatch: Boolean,
        notify: Boolean,
        findUser: preferencesTypeFind
        findCoFounder: preferencesTypeFind
        findMentor: preferencesTypeFind
        findMentee: preferencesTypeFind
        findProject: preferencesTypeFind
    }

    type preferencesTypeFind {
        interestedMatch: Boolean,
        notify: Boolean,
        percentage: Int, 
        pastSearch: [prefPastSearch],
    }

    type prefPastSearch {
        nodesID: [ID],
    }

    type nodesType {
        nodeData: Node
        orderIndex: Int
        level: Int 
        weight: Float
        trust: nodeTrustType
        aboveNodes: [Node]
    }

    type nodeTrustType {
        totalTrust: Float,
        endorseTrust: Float,
    }

    type chatResponse {
        numChat: Int
        numReply: Int
    }


    type onboardingType {
        signup: Boolean
        percentage: Int

    }

    type gardenUpdateType {
        epic: [Epic],
        task: [ProjectUpdate],
    }

    type MembersSmallType {
        _id: ID  
        discordName: String
        discordAvatar: String
        discriminator: String
    }

    type contentType {
        interest: String,
        mostProud: String,
        showCaseAbility: String,
    }

    type linkType {
        name: String
        url: String
    }

    type skillType_member  {
        skillInfo: Skills
        level: levelEnum
        author: Members
    }

    type attributesType {
        Director: Int,
        Motivator: Int,
        Inspirer: Int,
        Helper: Int,
        Supporter: Int,
        Coordinator: Int,
        Observer: Int,
        Reformer: Int,
    }

    type previousProjectsType {
        title: String,
        description: String,
        positionName: String,
        link: String,
        picture: String,
        startDate: String,
        endDate: String,
    }

    type projectMemberType {
        info: Project,
        role: roleType,
        champion: Boolean,
        phase: phaseType,
        favorite: Boolean,
    }
    

    type skillsType {
        id: String,
        authors: [Members],
        points: Float,
    }

    
    type matchMembersToUserOutput {
        matchPercentage: Float,
        member: Members,
        commonSkills: [Skills],
    }

    type matchMembersToSkillOutput {
        matchPercentage: MatchPercentage,
        member: Members,
        extraMatch: Boolean, # if you extraMatch = true, means that it is not the real main match but it is extra becuae there wasn't enough matches!  
        nodesPercentage: [nodesPercentageType]
        skillsPercentage: [SkillsPercentage] 
    }

    type nodesPercentageType {
        node: Node
        totalPercentage: Float
        conn_nodeIDs: [ID]
        mostRelevantMemberNodes:[mostRelevantMemberNodeType]
    }

    type mostRelevantMemberNodeType {
        node: Node
        score: Float
    }
    

    type MatchPercentage {
        totalPercentage: Float,
        realTotalPercentage: Float,
        percentageWithPenalty: Float,
        skillTotalPercentage: Float,
        hoursPercentage: Float,
        budgetPercentage: Float,
    }

    type SkillsPercentage {
        info: Skills
        percentage100: Float
        percentageReal: Float
    }

    type matchMembersToProjectOutput {
        matchPercentage: Float,
        member: Members,
        commonSkills: [Skills]
    }

    type matchMembersToProjectRoleOutput {
        matchPercentage: Float,
        member: Members,
        commonSkills: [Skills]
    }

    type matchPrepareSkillToMembersOutput {
        matchPercentage: Float,
        member: Members,
        commonSkills: [Skills]
    }

    type matchSkillsToProjectsOutput {
        matchPercentage: Float,
        realPercebtage: Float,
        project: Project,
        commonSkills: [Skills]
        projectRoles: [matchProjectRoles]
    }

    type memberPieChartNodeCategoriesOutput {
        categoryName: String,
        percentage: Float,
        nodes: [Node]
    }
    input memberPieChartNodeCategoriesInput {
        memberID: ID
    }

    type memberRadioChartCharacterAttributesOutput {
        attributeName: String,
        score: Float,
        reason: String,
    }
    input memberRadioChartCharacterAttributesInput {
        memberID: ID
    }
    type candidateNotesEdenAIOutput {
        categoryName: String,
        score: Float,
        reason: [String],
    }
    input candidateNotesEdenAIInput {
        memberID: ID
        positionID: ID
    }

    type candidateNotesComparePositionEdenAIOutput {
        categoryName: String,
        score: Float,
        reason: [String],
    }
    input candidateNotesComparePositionEdenAIInput {
        memberID: ID
        positionID: ID
    }
    
    type matchProjectRoles {
        matchPercentage: Float,
        realPercebtage: Float,
        projectRole: roleType,
        commonSkills: [Skills]
    }

    type endorsements {
        endorser: MembersSmallType
        endorsementMessage: String
        arweaveTransactionID: String
        endorseNodes: [endorseNode]
        endorseOrReview: endorseOrReviewEnum
        stars: Int
        discussion: [discussionMessage]
        stake: Float,
        income: Float,
    }

    type endorseSummaryType {
        averageStars: Float,
        averageStake: Float,
        totalStake: Float,
        numberEndorsement: Int,
        endorsers: [MembersSmallType],
        summary: String,
        mainNodes: [endorseNode]
    }

    type reviewSummaryType {
        averageStars: Float,
        totalIncome: Float,
        numberReview: Int,
        reviewers: [MembersSmallType],
        summary: String,
        mainNodes:[endorseNode],
    }

    type discussionMessage {
        role: String,
        content: String,
    }

    enum endorseOrReviewEnum {
        ENDORSE
        REVIEW
    }


    input findMemberInput {
        _id: ID
        serverID: [String]
        discordName: ID
        telegramChatID: ID
    }

    input findMembersInput {
        _id: [ID]
        serverID: [String]
    }

    input members_autocompleteInput {
        search: String,
    }

    input matchMembersToUserInput {
        memberID: ID
        serverID:[String]
    }
    input matchMembersToSkillInput {
        skillsID: [ID]
        serverID: [String]
    }

    input matchMembersToProjectInput {
        projectID: ID
        serverID: [String]
    }

    input matchMembersToProjectRoleInput {
        projectRoleID: ID
        serverID: [String]
    }

    input matchPrepareSkillToMembersInput {
        skillID: ID
        serverID: [String]
    }

    input matchPrepareNodeInput {
        nodeID: ID
        serverID: [String]
        find: findEnum
        weightSkills: Boolean
    }
    input matchPrepareNode_AI4Input {
        nodeID: ID
        serverID: [String]
        find: findEnum
        distancePenalty: [Float]
    }

    enum findEnum {
        Member
        ProjectRole
    }

    input matchPrepareSkillToProjectRolesInput {
        skillID: ID
        serverID: [String]
    }

    input matchSkillsToMembersInput {
        skillsID: [ID]
        hoursPerWeek: Int
        budgetAmount: Float
        serverID: [String]
        page: Int
        limit: Int
    }

    input matchNodesToMembersInput {
        nodesID: [ID]
        hoursPerWeek: Int
        budgetAmount: Float
        serverID: [String]
        page: Int
        limit: Int
        preference: [preferencesEnum]
    }

    input weightModulesInput {
        type: String
        weight: Int
    }

    input matchNodesToMembers_AI4Input {
        nodesID: [ID]
        positionID: ID
        membersIDallow: [ID]
        budget: budgetInputT
        experienceLevel: Int
        availability: availabilityInput
        weightModules: [weightModulesInput]
        page: Int
        limit: Int
    }

    input budgetInputT {
        minPerHour: Float
        maxPerHour: Float
    }

    input availabilityInput {
        minHourPerWeek: Int
        maxHourPerWeek: Int
    }

    input matchSkillsToProjectsInput {
        skillsID: [ID]
        serverID: [String]
        page: Int
        limit: Int
    }

    input matchNodesToProjectRolesInput {
        nodesID: [ID]
        serverID: [String]
        page: Int
        limit: Int
    }

    input addNewMemberInput {
        _id: ID
        discordName: String
        discordAvatar: String
        discriminator: String
        bio: String

        invitedBy: String

        hoursPerWeek: Float,

        serverID: String,

        previousProjects: [previousProjectsInput],

    }

    input conductInput {
        number: String,
        whatsappNumber: String,
        email: String,
        telegram: String,
    }

    input initiateConnectionTelegramInput {
        memberID: ID
        positionID: ID
    }

    type updateTGOutput {
        done: Boolean
        _id: ID
        name: String
        telegram: String,
        telegramChatID: String,
        authTelegramCode: String
    }

    input checkUsersForTGConnectionInput {
        authNumberTGMessage: String
        telegramID: String
        telegramChatID: String
    }


    input updateMemberInput {
        _id: ID
        discordName: String
        discordAvatar: String
        discriminator: String
        bio: String

        conduct: conductInput
        
        companies: [ID]

        onbording: onboardingInput

        content: contentInput
        interest: String
        timeZone: String
        serverID: [String],
        skills: [skillInput_member]
        
        memberRole: ID

        budget: budgetInputTk

        hoursPerWeek: Float,

        previousProjects: [previousProjectsInput],

        links: [linkInput],

        experienceLevel: experienceLevelInput,
        location: String
    }

    input budgetInputTk {
        totalBudget: Float,
        token: String,
        perHour: Float,
        perMonth: Float,
    }

    input experienceLevelInput {
        total: Int,
        years: Int, 
    }


    input onboardingInput {
        signup: Boolean
        percentage: Int
    }

    input contentInput {
        interest: String,
        mostProud: String,
        showCaseAbility: String,
    }

    input linkInput {
        name: String
        url: String
    }

    input skillInput_member {
        id: ID
        level: levelEnum
    }

    input addFavoriteProjectInput {
        #memberID: ID
        projectID: ID
        favorite: Boolean
    }

    input addPreferencesToMemberInput {
        memberID: ID
        preferences: [preferencesInput]
    }

    input preferencesInput {
        preference: preferencesEnum
        interestedMatch: Boolean
        notify: Boolean
        percentage: Int
        pastSearch: [pastSearchInput]
    }

    input pastSearchInput {
        nodesID: [ID]
    }

    enum preferencesEnum {
        findUser
        findCoFounder
        findMentor
        findMentee
        findProject
    }

    input addNodesToMemberInput {
        memberID: ID
        nodesID: [String]
        nodesID_level: [nodesID_levelInput]
    }

    input nodesID_levelInput {
        nodeID: ID
        orderIndex: Int
        level: Float 
        aboveNodes: [ID]
    }
    

    input updateNodesToMemberInput {
        # memberID: ID
        nodesID: [String]
        nodeType: String
        nodesID_level: [nodesID_levelInput]
        
    }

    input updateNodesToMemberMultiTypeNodeInput {
        # memberID: ID
        nodesID: [String]
        nodeType: String
        
    }

    input deleteNodesFromMemberInput {
        memberID: ID
        nodesID: [String]
    }
    input deleteMemberInput {
        memberID: ID
    }


    input endorseAttributeInput {
        _id: ID
        attribute: attributesEnum

    }

    enum attributesEnum {
        Director
        Motivator
        Inspirer
        Helper
        Supporter
        Coordinator
        Observer
        Reformer
    }

    enum levelEnum {
        learning
        junior
        mid
        senior
    }

     input previousProjectsInput {
        title: String,
        description: String,
        positionName: String,
        link: String,
        picture: String,
        startDate: String,
        endDate: String,
    }

    input networkInput {
        memberID: ID
        endorcment: [endorcmentInput]
    }

    input endorcmentInput {
        skillID: ID
        registeredAt: String
    }

    input skillsUpdateMemberInput {
        skillID: ID
        authors: String
        communityLevel: Float
        selfEndorsedLevel: Float
    }


    input addSkillToMember_Input {
        skillID: ID
        memberID: ID
        authorID: ID
        serverID: [String]
    }

   
    input endorseNodeInput {
        nodeID: ID
        confidence: Float
    }

    input discussionMessageInput {
        role: String,
        content: String,
    }

    input nodeCategoryInput {
        _id: ID
        numberNodes: Int
    }
    input createFakeUserInput {
        memberID: ID
        expertise: [nodeCategoryInput]
        interests: [nodeCategoryInput]
    }
    input createFakeUserCVnewInput {
        memberID: ID
        positionID: ID
        cvContent: String
    }
    input uploadUserDataGPTInput {
        memberID: ID
    }
    input updateMemberSignalInfoInput {
        memberID: ID

        hoursPerWeek: Int
        timeZone: String
        location: String

        totalIncome: Float
        completedOpportunities: Int
    }

    input updateStateEdenChatInput {
        userID: ID,
        chatID_TG: ID,
        positionIDs: [ID],
        categoryChat: categoryQueryResponseEnum,
    }

    type stateEdenChat {
        positionIDs: [ID],
        categoryChat: categoryQueryResponseEnum,
    }

    input reCreateMemberNeoInput {
        _id: ID
    }
    
    enum employeeRole {
        ADMIN
        EMPLOYEE
    }
`