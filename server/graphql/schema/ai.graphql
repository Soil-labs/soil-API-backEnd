module.exports = `

    type AI {
        _id: ID
        creator: ID
        mentioned: [ID]
        message: String
        serverID: String 
        edenAI: EdenAI
    }

    type EdenAI {
        keywords: [Keyword],
        nodes: [ID]
    }

    type Keyword {
        keywords: String
        embedding: [ Float ]
    }

    input addMessageInput {
        creator: ID
        mentioned: [ID]
        message: String
        serverID: String
    }

    input messageInp {
        message: String
        date: String
        name: String

    }

    input storeLongTermMemoryInput {
        messages: [messageInp]
        userID: ID
    }

    type storeLongTermMemoryOutput {
        summary: String
        success: Boolean
    }

    input addMessagesInput {
        data: [addMessageInput]
    }

    input findMessageInput {
        discordID: ID
        serverID: ID
    }

    input EdenAIInput {
        keywords: [KeywordInput],
        nodes: [ID]
    }

    input KeywordInput {
        keywords: String
        embedding: [ Float ]
    }

    input updateMessageInput {
        messageID: ID
        edenAI: EdenAIInput
    }

    input edenGPTreplyInput {
        message: String
    }
    input edenGPTsearchProfilesInput {
        message: String
        profileIDs: [ID]
    }
    input edenGPTsummaryProfileInput {
        conversation: [messageChat]
        memberID: ID
    }
    type edenGPTsummaryProfileOutput {
        reply: String
    }
    type edenGPTsearchProfilesOutput {
        reply: String
    }

    type edenGPTreplyOutput {
        reply: String
    }

    input messageMapKGInput {
        message: String
    }

    type messageMapKGOutput {
        keywords: [KeywordValue]
    }

    input messageMapKG_V2Input {
        message: String
    }

    type messageMapKG_V2Output {
        keywords: [KeywordValue]
    }

    input messageMapKG_V3Input {
        message: String
        assistantMessage: String
    }

    type messageMapKG_V3Output {
        keywords: [KeywordValue]
    }


    input edenGPTreplyMemoryInput {
        message: String
        memorySort: String
        userID: ID
    }

    type KeywordValue {
        keyword: String
        confidence: Int
        nodeID: ID
        node: Node
    }
    type edenGPTreplyMemoryOutput {
        reply: String
        # keywords: [String]
    }

    input messageChat {
        role: String
        content: String
    }

    input edenGPTreplyChatAPIInput {
        message: String
        conversation: [messageChat]
        userID: ID
    }

    type edenGPTreplyChatAPIOutput {
        reply: String
        # keywords: [String]
    }

    input edenGPTreplyChatAPI_V2Input {
        message: String
        conversation: [messageChat]
        userID: ID
    }

    type edenGPTreplyChatAPI_V2Output {
        reply: String
        # keywords: [String]
    }

    input edenGPTEndorseChatAPIInput {
        message: String
        conversation: [messageChat]
        userID: ID
    }

    type edenGPTEndorseChatAPIOutput {
        reply: String
        # keywords: [String]
    }

    input edenGPTReviewChatAPIInput {
        message: String
        conversation: [messageChat]
        userID: ID
    }

    type edenGPTReviewChatAPIOutput {
        reply: String
        # keywords: [String]
    }

    input useAI_OnMessageInput {
        message: String
        cash: Boolean
        numberKeywords: Float,
    }

    type useAI_OnMessageOutput {
        mainExpertise: String
        expertiseIdentified: [String]
        keywordsMessage: [String]
    }

    type messageToGPTOutput{
        message: String
    }

    input messageToGPTInput {
        message: String
        category: CategoryEnum
        prompt: String

    }


    type inputToGPTOutput{
        descriptionRole: String
        expectationsRole: [String]
        benefitsRole: [String]

    }

    input inputToGPTInput {
        oneLinerProject: String
        descriptionProject: String
        titleRole: String
        expertiseRole: [String]

    }



    input CVtoSummaryInput {
        cvString: String
    }

    type CVtoSummaryOutput {
        result: String
    }
    input CVtoJobsInput {
        cvString: String
    }

    type CVtoJobsOutput {
        result: String
    }

    enum CategoryEnum {
        project
        skill
        role
    }




    enum SortableMessageFields {
        _id
        createdAt
    }

    enum SortDirection {
        ASC
        DESC
    }
    
    input findMessageInputPaginated {
        request: findMessageInput
        after: String
        before: String
        limit: Int
        sortBy: SortByMessage
    }

    input SortByMessage {
        field: SortableMessageFields,
        direction: SortDirection
    }


    type PaginatedMessages {
        data: [AI]
        pageInfo: PageInfo
    }

    type PageInfo {
        hasNextPage : Boolean
        hasPrevPage: Boolean
        start : String
        end: String
    }

    
`