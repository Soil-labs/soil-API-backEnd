module.exports = `

    type AI {
        _id: ID
        creator: ID
        mentioned: [ID]
        message: String
        serverID: String 
        edenAI: EdenAI
    }

    type EdenAI {
        keywords: [Keyword],
        nodes: [ID]
    }

    type Keyword {
        keywords: String
        embedding: [ Float ]
    }

    input addMessageInput {
        creator: ID
        mentioned: [ID]
        message: String
        serverID: String
    }

    input messageInp {
        message: String
        date: String
        name: String

    }

    input storeLongTermMemoryInput {
        messages: [messageInp]
        userID: ID
    }

    type storeLongTermMemoryOutput {
        summary: String
        success: Boolean
    }


    input storeLongTermMemorySummaryInput {
        message: String
        userID: ID

    }

    type storeLongTermMemorySummaryOutput {
        success: Boolean
        message: String

    }

    input websiteToMemoryCompanyInput {
        message: String
        positionID: ID

    }

    type websiteToMemoryCompanyOutput {
        success: Boolean
        report: String
        nodes: [Node]
        interviewQuestionsForPosition: [interviewQuestionsForCandidateType]

    }

    input positionTextToExtraQuestionsInput {
        positionText: String
        positionID: ID

    }

    type positionTextToExtraQuestionsOutput {
        success: Boolean
        questions: [interviewQuestionsForCandidateType]
    }

    input conversationCVPositionToReportInput {
        memberID: ID
        positionID: ID
    }

    type conversationCVPositionToReportOutput {
        success: Boolean
        report: String
        CV_ConvoToPosition: [notesInterviewType2],
        CV_ConvoToPositionAverageScore: Float,
        reportPassFail: [reportPassFailType],
    }

    input positionTextAndConvoToReportCriteriaInput {
        positionID: ID
        updatedReport: String
    }

    type positionTextAndConvoToReportCriteriaOutput {
        success: Boolean
        report: String
    }

    input positionSuggestQuestionsAskCandidateInput {
        positionID: ID
    }

    type positionSuggestQuestionsAskCandidateOutput {
        success: Boolean
        questionSuggest: [questionSuggestType]
    }

     input findPrioritiesTrainEdenAIInput {
        positionID: ID
    }

    type findPrioritiesTrainEdenAIOutput {
        success: Boolean
        priorities: [prioritiesType]
        tradeOffs: [tradeOffsType]
    }


    type questionSuggestType {
        question: String
        IDCriteria: ID
        category: String
    }

    type reportPassFailType {
        categoryName: String,
        title: String,
        score: Int,
        reason: String,
        IDb: String,
    }

    type notesInterviewType2 {
        categoryName: String,
        score: Float,
        reason: [String],
    }

    input saveCVtoUserInput {
        cvContent: String
        userID: ID
        positionID: ID

    }

    type saveCVtoUserOutput {
        success: Boolean
        titleRole: String
        mainSkills: [String]
        cvSummary: String
        matchPercentage: Float
        strongFit: String
        improvementPoints: String
        growthAreas: String
        experienceAreas: String

    }

    input autoUpdateUserInfoFromCVInput {
        userIDs: [ID]
    }

    type autoUpdateUserInfoFromCVOutput {
        users: [Members]
    }

    input autoUpdateMemoryFromCVInput {
        userIDs: [ID]
    }

    type autoUpdateMemoryFromCVOutput {
        users: [Members]
    }

    input autoUpdateMemoryFromPositionRequirmentsInput {
        positionIDs: [ID]
    }

    input tradeOffsInput {
        tradeOff1: String,
        tradeOff2: String,
        selected: String,
    }

    input prioritiesInput {
        priority: String,
    }

    input updatePrioritiesTradeOffsInput {
        positionID: ID
        priorities: [prioritiesInput]
        tradeOffs: [tradeOffsInput]
    }

    type updatePrioritiesTradeOffsOutput {
        success: Boolean
        priorities: [prioritiesType]
        tradeOffs: [tradeOffsType]
    }

    type autoUpdateMemoryFromPositionRequirmentsOutput {
        positions: [Position]
    }

    input addMessagesInput {
        data: [addMessageInput]
    }


    input secondInterviewLetterInput {
        message: String
        userID: ID
        positionID: ID
    }

    type secondInterviewLetterOutput {
        generatedLetter: String
    }

    input rejectionLetterInput {
        message: String
        userID: ID
        positionID: ID
    }

    type rejectionLetterOutput {
        generatedLetter: String
    }

    


    input findMessageInput {
        discordID: ID
        serverID: ID
    }

    input EdenAIInput {
        keywords: [KeywordInput],
        nodes: [ID]
    }

    input KeywordInput {
        keywords: String
        embedding: [ Float ]
    }

    input updateMessageInput {
        messageID: ID
        edenAI: EdenAIInput
    }

    input edenGPTreplyInput {
        message: String
    }
    input identifyCategoryAndReplyInput {
        chatID_TG: ID
        message: String
        replyFlag: Boolean
    }
    type identifyCategoryAndReplyOutput {
        category: categoryMessageCategoryEnum
        reply: String
    }
    enum categoryMessageCategoryEnum {
        GENERAL_CONVERSATION
        ASK_ABOUT_POSITION_ALREADY_APPLIED
        ASK_FIND_NEW_POSITION
        GIVE_MORE_INFO_ABOUT_BACKGROUND
    }
    input edenGPTsearchProfilesInput {
        message: String
        profileIDs: [ID]
    }
    input edenGPTsummaryProfileInput {
        conversation: [messageChat]
    }
    type edenGPTsummaryProfileOutput {
        reply: String
    }
    input conversationToSummaryGPTInput {
        conversation: [messageChat]
        memberID: ID
    }
    type conversationToSummaryGPTOutput {
        reply: String
    }
    type edenGPTsearchProfilesOutput {
        reply: String
    }

    type edenGPTreplyOutput {
        reply: String
    }
    

    input messageMapKGInput {
        message: String
    }

    type messageMapKGOutput {
        keywords: [KeywordValue]
    }

    input messageMapKG_V2Input {
        message: String
    }

    type messageMapKG_V2Output {
        keywords: [KeywordValue]
    }

    input messageMapKG_V3Input {
        message: String
        assistantMessage: String
    }

    type messageMapKG_V3Output {
        keywords: [KeywordValue]
    }

    input messageMapKG_V4Input {
        message: String
        assistantMessage: String
    }

    type messageMapKG_V4Output {
        keywords: [KeywordValue]
    }

    input messageMapKG_V5Input {
        message: String
        assistantMessage: String
        conversation: [messageChat]
    }

    type messageMapKG_V5Output {
        keywords: [KeywordValue]
    }


    input edenGPTreplyMemoryInput {
        message: String
        memorySort: String
        userID: ID
    }

    type KeywordValue {
        keyword: String
        confidence: Int
        nodeID: ID
        node: Node
    }
    type edenGPTreplyMemoryOutput {
        reply: String
        # keywords: [String]
    }

    input askEdenUserPositionInput {
        userID: ID
        positionID: ID
        conversation: [messageChat]
        whatToAsk: whatToAskEnum
    }

     type askEdenUserPositionOutput {
        reply: String
        # keywords: [String]
    }


    input messageChat {
        role: String
        content: String
        date: Date
    }

    input edenGPTreplyChatAPIInput {
        message: String
        conversation: [messageChat]
        userID: ID
    }

    type edenGPTreplyChatAPIOutput {
        reply: String
        # keywords: [String]
    }

    input edenGPTreplyChatAPI_V2Input {
        message: String
        conversation: [messageChat]
        userID: ID
    }

   

    type edenGPTreplyChatAPI_V2Output {
        reply: String
        # keywords: [String]
    }

    input edenGPTreplyChatAPI_V3Input {
        message: String
        conversation: [messageChat]
        userID: ID
        executedTasks: [executedActionInput]
        previusTaskDoneID: String 
    }

    input executedActionInput {
        taskType: String
        percentageCompleted: Int
        taskTypeID: String
    }

    type edenGPTreplyChatAPI_V3Output {
        reply: String
        executedTasks: [executedActionType]
        executeTaskType: String
        # keywords: [String]
    }

    type executedActionType {
        taskType: String
        percentageCompleted: Int
        taskTypeID: String

    }

    input edenGPTCreateProfileExperienceChatAPIInput {
        message: String
        conversation: [messageChat]
        experienceTypeID: experienceTypeIDEnum
        userID: ID
        useMemory: Boolean
    }

    enum experienceTypeIDEnum {
        BACKGROUND
        SKILLS_EXPERIENCE
        CAREER_GOALS_ASPIRATIONS
        WORK_PREFERENCES
        GENERAL_CONVERSATION
    }

    enum whatToAskEnum {
        CANDIDATE_OF_COMPANY
        COMPANY
        ALL_CANDIDATES_OF_COMPANY
    }

    type edenGPTCreateProfileExperienceChatAPIOutput {
        reply: String
    }

    
    input edenAITalSearchExpirienceInput {
        message: String
        conversation: [messageChat]
        experienceTypeID: experienceTalSearchTypeIDEnum
    }

    enum experienceTalSearchTypeIDEnum {
        SKILLS_EXPERIENCE
        INDUSTRIES
        CULTURE_FIT
    }

    input interviewEdenAIInput {
        userID: ID
        positionID: ID
        positionTrainEdenAI: Boolean
        useMemory: Boolean
        conversation: [messageChat]
        unansweredQuestions: [String]
        unansweredQuestionsArr: [unansweredQuestionsInput]
        questionAskingNow: String
        questionAskingID: ID
        timesAsked: Int
    }

    
    type interviewEdenAIOutput {
        reply: String
        date: Date
        conversationID: ID
        questionAskingNow: String
        unansweredQuestions: [String]
        unansweredQuestionsArr: [unansweredQuestionsType]
        timesAsked: Int
    }

    input interviewEdenGPT4onlyInput {
        userID: ID
        positionID: ID
        positionTrainEdenAI: Boolean
        useMemory: Boolean
        conversation: [messageChat]
    }

    
    type interviewEdenGPT4onlyOutput {
        reply: String
        date: Date
        conversationID: ID
    }

    input unansweredQuestionsInput {
        questionContent: String
        questionID: ID
    }

    type unansweredQuestionsType {
        questionContent: String
        questionID: ID
    }

    
    type edenAITalSearchExpirienceOutput {
        reply: String
    }

    input createProfileExperienceWithChatCVMemoryInput {
        message: String
        conversation: [messageChat]
        experienceTypeID: experienceTypeIDEnum
        userID: ID
    }

    type createProfileExperienceWithChatCVMemoryOutput {
        reply: String
    }

    input edenGPTEndorseChatAPIInput {
        message: String
        conversation: [messageChat]
        userID: ID
    }

    type edenGPTEndorseChatAPIOutput {
        reply: String
        # keywords: [String]
    }

    input evaluateAnswerEdenAIInput {
        question: String
        answer: String
        bestAnswer: String
        findReason: Boolean
    }

    type evaluateAnswerEdenAIOutput {
        score: Float
        reason: String
    }

    input edenGPTReviewChatAPIInput {
        message: String
        conversation: [messageChat]
        userID: ID
    }

    type edenGPTReviewChatAPIOutput {
        reply: String
        # keywords: [String]
    }

    input useAI_OnMessageInput {
        message: String
        cash: Boolean
        numberKeywords: Float,
    }

    type useAI_OnMessageOutput {
        mainExpertise: String
        expertiseIdentified: [String]
        keywordsMessage: [String]
    }

    type messageToGPTOutput{
        message: String
    }

    input messageToGPTInput {
        message: String
        category: CategoryEnum
        prompt: String

    }


    type inputToGPTOutput{
        descriptionRole: String
        expectationsRole: [String]
        benefitsRole: [String]

    }

    input inputToGPTInput {
        oneLinerProject: String
        descriptionProject: String
        titleRole: String
        expertiseRole: [String]

    }



    input CVtoSummaryInput {
        cvString: String
    }

    type CVtoSummaryOutput {
        result: String
    }
    input CVtoJobsInput {
        cvString: String
    }

    type CVtoJobsOutput {
        result: String
    }

    input cvMapKGInput {
        message: String
    }

    type cvMapKGOutput {
        keywords: [KeywordValue]
    }


    

    enum CategoryEnum {
        project
        skill
        role
    }




    enum SortableMessageFields {
        _id
        createdAt
    }

    enum SortDirection {
        ASC
        DESC
    }
    
    input findMessageInputPaginated {
        request: findMessageInput
        after: String
        before: String
        limit: Int
        sortBy: SortByMessage
    }

    input SortByMessage {
        field: SortableMessageFields,
        direction: SortDirection
    }

    type AddCVToUserOutput {
        userID: String
        cvSummary: String
    }


    type PaginatedMessages {
        data: [AI]
        pageInfo: PageInfo
    }

    type PageInfo {
        hasNextPage : Boolean
        hasPrevPage: Boolean
        start : String
        end: String
    }

    
`